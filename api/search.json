[{"id":"99a8a5602a8138c01c896baa1cf371db","title":"websocket","content":"#HTML\n定义\n\n\n\n\n\n\n\n\nWebSockets is a protocol for bi-directional, real-time communication between a client and a server over the World Wide Web. It was designed to work over the same ports (80 and 443) as HTTP and HTTPS, which makes it easier to traverse firewalls and proxy servers. The WebSockets protocol was standardized by the Internet Engineering Task Force (IETF) as part of HTML5 and is supported by modern browsers, including Google Chrome, Mozilla Firefox, Microsoft Edge, and Apple Safari.\n特点\n允许客户端和服务端全双工通信\n服务端可以主动向客户端发送信息\nhttp 协议只能由客户端向服务端发送信息\n\n\n建立在 TCP 协议上\n与 HTTP 协议有很好的兼容性，默认端口 80 和 443\n数据格式轻量\n可以发送文本和二进制数据\n没有同源限制\n协议标识符是 ws\n\nHttp 与 Websocket 区别API构造函数const ws = new WebSocket('ws://localhost:8080');\n\nwebSocket.readyState\n\n\n\n\n\n\n\n\nCONNECTING：值为 0，表示正在连接。OPEN：值为 1，表示连接成功，可以通信了。CLOSING：值为 2，表示连接正在关闭。CLOSED：值为 3，表示连接已经关闭，或者打开连接失败。\nwebSocket.onopen连接成功后的回调函数\nws.onopen = function () &#123;\n  ws.send('Hello Server!');\n&#125;\n\nwebSocket.onclose连接关闭后的回调函数\nws.onclose = function(event) &#123;\n  const code = event.code;\n  const reason = event.reason;\n  const wasClean = event.wasClean;\n  // handle close event\n&#125;;\n\nwebSocket.onmessage接收到服务器信息后的回调函数\nws.onmessage = function(event) &#123;\n  const data = event.data;\n  // data:arraybuffer | string\n  // 处理数据\n&#125;;\n\nwebSocket.binaryType指定接收的二进制数据类型\n// 收到的是 blob 数据\nws.binaryType = \"blob\";\nws.onmessage = function(e) &#123;\n  console.log(e.data.size);\n&#125;;\n\n// 收到的是 ArrayBuffer 数据\nws.binaryType = \"arraybuffer\";\nws.onmessage = function(e) &#123;\n  console.log(e.data.byteLength);\n&#125;;\n\nwebSocket.send()实例发送信息函数\nws.send('your message');\n\nws.send(file:file)\n\nws.send(buffer:arraybuffer)\n\nwebSocket.bufferedAmount实例对象还剩多少二进制数据没有发送\nconst data = new ArrayBuffer(10000000);\nsocket.send(data);\n\nif (socket.bufferedAmount === 0) &#123;\n  // 发送完毕\n&#125; else &#123;\n  // 发送还没结束\n&#125;\n\nwebSocket.onerror指定报错时的回调函数\nsocket.onerror = function(event) &#123;\n  // handle error event\n&#125;;\n\nsocket.addEventListener(\"error\", function(event) &#123;\n  // handle error event\n&#125;);\n","slug":"websocket","date":"2023-07-05T19:02:39.366Z","categories_index":"","tags_index":"","author_index":"Devmacy"},{"id":"12dd0582b81172220ef6d0da436b7faa","title":"网址","content":"\nemoij大全\n\n","slug":"网址","date":"2023-07-05T18:33:04.508Z","categories_index":"","tags_index":"","author_index":"Devmacy"},{"id":"8577172d587822c13c6c2f341014a5ff","title":"Markdown语法","content":"标题# 这是一级标题\n## 这是二级标题\n### 这是三级标题\n#### 这是四级标题\n##### 这是五级标题\n###### 这是六级标题\n\n效果这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题字体**这是加粗的文字**\n*这是倾斜的文字*`\n***这是斜体加粗的文字***\n~~这是加删除线的文字~~\n\n效果这是加粗的文字这是倾斜的文字&#96;这是斜体加粗的文字这是加删除线的文字\n引用>这是引用的内容\n>>这是引用的内容\n>>>这是引用的内容\n\n效果\n\n\n\n\n\n\n\n\n这是引用的内容\n\n这是引用的内容\n\n这是引用的内容\n\n\n分割线---\n----\n***\n*****\n\n效果\n\n\n\n图片![图片alt](图片地址)\n\n图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n图片title是图片的标题，当鼠标移到图片上时显示的内容。\n\n效果\n超链接[超链接名](超链接地址)\n\n效果掘金百度\n列表无序列表- 列表内容\n+ 列表内容\n* 列表内容\n\n注意：- + * 跟内容之间都要有一个空格\n\n效果\n列表内容\n列表内容\n列表内容\n\n有序列表1. 列表内容\n2. 列表内容\n3. 列表内容\n\n注意：序号跟内容之间要有空格\n\n效果\n列表内容\n列表内容\n列表内容\n\n列表嵌套效果\n有序列表\n有序列表二级\n有序列表三级\n有序列表四级\n\n\n\n\n\n\n\n\n无\n无二级\n无三级\n无四级\n。。。\n\n\n\n\n\n\n\n\n无序列表\na\nb\nc\nd\n\n\n\n\n有序列表\na\nb\nc\nd\n\n\n\n表格表头|表头|表头\n---|:--:|---:\n内容|内容|内容\n内容|内容|内容\n\n第二行分割表头和内容。\n- 有一个就行，为了对齐，多加了几个\n:--- 文字默认居左\n:--: 表示文字居中\n---: 表示文字居右\n\n注：原生的语法两边都要用 | 包起来。此处省略\n\n\n效果\n\n\n序号\n设备名称\n设备类型\n\n\n\n1\n变压器\n变压器\n\n\n2\n开关\n开关\n\n\n代码`代码内容`\n\n效果function(param)&#123;\n return \"\"\n&#125;\n\n待办- [ ] 待办1\n\n效果\n 代办 1\n\n戚宴冰牛逼厉害了他真的我哭死","slug":"Markdown语法","date":"2023-01-04T14:02:25.248Z","categories_index":"","tags_index":"","author_index":"Devmacy"}]