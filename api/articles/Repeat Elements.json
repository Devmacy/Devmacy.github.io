{"title":"Repeat Elements","uid":"157ce0eee3d9c2ed779f4b047afcb6dc","slug":"Repeat Elements","date":"2023-07-29T10:00:19.287Z","updated":"2023-07-29T10:00:19.406Z","comments":true,"path":"api/articles/Repeat Elements.json","keywords":"Digital Garden","cover":[],"content":"<p>&#x2F;*</p>\n<p><img src=\"https://raw.githubusercontent.com/zsviczian/obsidian-excalidraw-plugin/master/images/scripts-download-raw.jpg\"></p>\n<p>Download this file and save to your Obsidian Vault including the first line, or open it in “Raw” and copy the entire contents to Obsidian.</p>\n<p><img src=\"https://raw.githubusercontent.com/zsviczian/obsidian-excalidraw-plugin/master/images/scripts-repeat-elements.png\"></p>\n<p>This script will detect the difference between 2 selected elements, including position, size, angle, stroke and background color, and create several elements that repeat these differences based on the number of repetitions entered by the user.</p>\n<p>See documentation for more details:<br><a href=\"https://zsviczian.github.io/obsidian-excalidraw-plugin/ExcalidrawScriptsEngine.html\">https://zsviczian.github.io/obsidian-excalidraw-plugin/ExcalidrawScriptsEngine.html</a></p>\n<pre><code class=\"javascript\">*/\n\nif(!ea.verifyMinimumPluginVersion || !ea.verifyMinimumPluginVersion(&quot;1.7.19&quot;)) &#123;\n  new Notice(&quot;This script requires a newer version of Excalidraw. Please install the latest version.&quot;);\n  return;\n&#125;\n\nlet repeatNum = parseInt(await utils.inputPrompt(&quot;repeat times?&quot;,&quot;number&quot;,&quot;5&quot;));\nif(!repeatNum) &#123;\n    new Notice(&quot;Please enter a number.&quot;);\n    return;\n&#125;\n\nconst selectedElements = ea.getViewSelectedElements().sort((lha,rha) =&gt; \n    lha.x === rha.x? (lha.y === rha.y? \n    (lha.width === rha.width? \n    (lha.height - rha.height) : lha.width - rha.width) \n    : lha.y - rha.y) : lha.x - rha.x);\n\nif(selectedElements.length !== 2) &#123;\n    new Notice(&quot;Please select 2 elements.&quot;);\n    return;\n&#125;\n\nif(selectedElements[0].type !== selectedElements[1].type) &#123;\n    new Notice(&quot;The selected elements must be of the same type.&quot;);\n    return;\n&#125;\n\nconst xDistance = selectedElements[1].x - selectedElements[0].x;\nconst yDistance = selectedElements[1].y - selectedElements[0].y;\nconst widthDistance = selectedElements[1].width - selectedElements[0].width;\nconst heightDistance = selectedElements[1].height - selectedElements[0].height;\nconst angleDistance = selectedElements[1].angle - selectedElements[0].angle;\n\nconst bgColor1 = ea.colorNameToHex(selectedElements[0].backgroundColor);\nconst cmBgColor1 = ea.getCM(bgColor1);\nconst bgColor2 = ea.colorNameToHex(selectedElements[1].backgroundColor);\nlet   cmBgColor2 = ea.getCM(bgColor2);\nconst isBgTransparent = cmBgColor1.alpha === 0  || cmBgColor2.alpha === 0;\nconst bgHDistance = cmBgColor2.hue - cmBgColor1.hue;\nconst bgSDistance = cmBgColor2.saturation - cmBgColor1.saturation;\nconst bgLDistance = cmBgColor2.lightness - cmBgColor1.lightness;\nconst bgADistance = cmBgColor2.alpha - cmBgColor1.alpha;\n\nconst strokeColor1 = ea.colorNameToHex(selectedElements[0].strokeColor);\nconst cmStrokeColor1 = ea.getCM(strokeColor1);\nconst strokeColor2 = ea.colorNameToHex(selectedElements[1].strokeColor);\nlet   cmStrokeColor2 = ea.getCM(strokeColor2);\nconst isStrokeTransparent = cmStrokeColor1.alpha === 0 || cmStrokeColor2.alpha ===0;\nconst strokeHDistance = cmStrokeColor2.hue - cmStrokeColor1.hue;\nconst strokeSDistance = cmStrokeColor2.saturation - cmStrokeColor1.saturation;\nconst strokeLDistance = cmStrokeColor2.lightness - cmStrokeColor1.lightness;\nconst strokeADistance = cmStrokeColor2.alpha - cmStrokeColor1.alpha;\n\n\nea.copyViewElementsToEAforEditing(selectedElements);\nfor(let i=0; i&lt;repeatNum; i++) &#123;\n    const newEl = ea.cloneElement(selectedElements[1]);\n    ea.elementsDict[newEl.id] = newEl;\n    newEl.x += xDistance * (i + 1);\n    newEl.y += yDistance * (i + 1);\n    newEl.angle += angleDistance * (i + 1);\n    const originWidth = newEl.width;\n    const originHeight = newEl.height;\n    const newWidth = newEl.width + widthDistance * (i + 1);\n    const newHeight = newEl.height + heightDistance * (i + 1);\n    if(newWidth &gt;= 0 &amp;&amp; newHeight &gt;= 0) &#123;\n        if(newEl.type === &#39;arrow&#39; || newEl.type === &#39;line&#39; || newEl.type === &#39;freedraw&#39;) &#123;\n          const minX = Math.min(...newEl.points.map(pt =&gt; pt[0]));\n          const minY = Math.min(...newEl.points.map(pt =&gt; pt[1]));\n          for(let j = 0; j &lt; newEl.points.length; j++) &#123;\n            if(newEl.points[j][0] &gt; minX) &#123;\n              newEl.points[j][0] = newEl.points[j][0] + ((newEl.points[j][0] - minX) / originWidth) * (newWidth - originWidth);\n            &#125;\n            if(newEl.points[j][1] &gt; minY) &#123;\n              newEl.points[j][1] = newEl.points[j][1] + ((newEl.points[j][1] - minY) / originHeight) * (newHeight - originHeight);\n            &#125;\n          &#125;\n        &#125;\n        else &#123;\n          newEl.width = newWidth;\n          newEl.height = newHeight;\n        &#125;\n    &#125;\n\n    if(!isBgTransparent) &#123;\n        cmBgColor2 = cmBgColor2.hueBy(bgHDistance).saturateBy(bgSDistance).lighterBy(bgLDistance).alphaBy(bgADistance);\n        newEl.backgroundColor = cmBgColor2.stringHEX();\n    &#125; else &#123;\n      newEl.backgroundColor = &quot;transparent&quot;;\n    &#125;\n\n    if(!isStrokeTransparent) &#123;\n        cmStrokeColor2 = cmStrokeColor2.hueBy(strokeHDistance).saturateBy(strokeSDistance).lighterBy(strokeLDistance).alphaBy(strokeADistance);\n        newEl.strokeColor = cmStrokeColor2.stringHEX();\n    &#125; else &#123;\n      newEl.strokeColor = &quot;transparent&quot;;\n    &#125;\n&#125;\n\nawait ea.addElementsToView(false, false, true);\n</code></pre>\n","text":"&#x2F;* Download this file and save to your Obsidian Vault including the first line, or open it in “Raw” and copy the entire contents to Obs...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Reverse arrows","uid":"19078ee4c978271aa8e1231ea4870b9c","slug":"Reverse arrows","date":"2023-07-29T10:00:19.289Z","updated":"2023-07-29T10:00:19.407Z","comments":true,"path":"api/articles/Reverse arrows.json","keywords":"Digital Garden","cover":[],"text":"&#x2F;* Download this file and save to your Obsidian Vault including the first line, or open it in “Raw” and copy the entire contents to Obs...","link":"","photos":[],"count_time":{"symbolsCount":702,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Rename Image","uid":"0979f76108535de26ea84ad0bdc87200","slug":"Rename Image","date":"2023-07-29T10:00:19.285Z","updated":"2023-07-29T10:00:19.405Z","comments":true,"path":"api/articles/Rename Image.json","keywords":"Digital Garden","cover":[],"text":"&#x2F;* Select an image on the canvas and run the script. You will be prompted to provide a new filename &#x2F; filepath. This cuts down the...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}