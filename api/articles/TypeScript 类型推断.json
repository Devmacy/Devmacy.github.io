{"title":"TypeScript 类型推断","uid":"722f32e5a716e48bf546864e109834ee","slug":"TypeScript 类型推断","date":"2023-07-07T17:47:16.110Z","updated":"2023-07-07T17:47:16.251Z","comments":true,"path":"api/articles/TypeScript 类型推断.json","keywords":null,"cover":null,"content":"<p>#TypeScript  </p>\n<h1 id=\"声明变量时指定类型\"><a href=\"#声明变量时指定类型\" class=\"headerlink\" title=\"声明变量时指定类型\"></a>声明变量时指定类型</h1><pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">let name: string &#x3D; &quot;John&quot;; \nlet age: number &#x3D; 25; \nlet isActive: boolean &#x3D; true;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"类型推断\"><a href=\"#类型推断\" class=\"headerlink\" title=\"类型推断\"></a>类型推断</h1><p>自动根据上下文进行类型推断</p>\n<pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">let name &#x3D; &quot;John&quot;; &#x2F;&#x2F; 推断为string类型 \nlet age &#x3D; 25; &#x2F;&#x2F; 推断为number类型 \nlet isActive &#x3D; true; &#x2F;&#x2F; 推断为boolean类型<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"函数参数和函数返回值\"><a href=\"#函数参数和函数返回值\" class=\"headerlink\" title=\"函数参数和函数返回值\"></a>函数参数和函数返回值</h1><pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">function add(x: number, y: number): number &#123; return x + y; &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h1><pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">let messageLength: number &#x3D; (message as string).length;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"Instanceof\"><a href=\"#Instanceof\" class=\"headerlink\" title=\"Instanceof\"></a>Instanceof</h1><pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">Class Person &#123;\n\tname:string;\n\tconstructor(name: string) &#123; this.name &#x3D; name; &#125;\n&#125;\n\nlet person &#x3D; new Person(&quot;bb&quot;)\nconsole.log(person instanceof Person)&#x2F;&#x2F;true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"#TypeScript 声明变量时指定类型let name: string &#x3D; &quot;John&quot;; let age: number &#x3D; 25; let isActive: boolean &#x3D; true; 类型推断自动根据上下文进行类型...","link":"","photos":[],"count_time":{"symbolsCount":669,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/tags/TypeScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E6%97%B6%E6%8C%87%E5%AE%9A%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">声明变量时指定类型</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD\"><span class=\"toc-text\">类型推断</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%92%8C%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">函数参数和函数返回值</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">类型断言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Instanceof\"><span class=\"toc-text\">Instanceof</span></a></li></ol>","author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"TypeScript装饰器","uid":"6ce48bf08a6702c21eabf4f22bcbbe7d","slug":"TypeScript装饰器","date":"2023-07-07T17:47:16.113Z","updated":"2023-07-07T17:47:16.253Z","comments":true,"path":"api/articles/TypeScript装饰器.json","keywords":null,"cover":null,"text":"#TypeScript TypeScript 装饰器是一种特殊类型的声明，它可以附加到类、方法、属性或参数上，以修改或增强它们的行为。装饰器提供了一种在不修改源代码的情况下对现有代码进行扩展的机制。 分类类装饰器\"compilerOptions\": &#123; \"experim...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/tags/TypeScript.json"}],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"TypeScript 内置类型","uid":"a47409eec97e52b23350d2deb27473f3","slug":"TypeScript 内置类型","date":"2023-07-07T17:47:16.108Z","updated":"2023-07-07T17:47:16.250Z","comments":true,"path":"api/articles/TypeScript 内置类型.json","keywords":null,"cover":null,"text":"#TypeScript Numberlet num:number = 1; Booleanlet isDone: boolean = false; Object object 表示非原始类型 declare function create(o: object | null): v...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/tags/TypeScript.json"}],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}