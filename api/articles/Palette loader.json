{"title":"Palette loader","uid":"0b0066a8613d76f0c8f7aecf59e585d7","slug":"Palette loader","date":"2023-07-29T10:00:19.281Z","updated":"2023-07-29T10:00:19.400Z","comments":true,"path":"api/articles/Palette loader.json","keywords":"Digital Garden","cover":[],"content":"<p>&#x2F;*</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/epYNx2FSf2w\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\nLink:: https://youtu.be/epYNx2FSf2w\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/diBT5iaoAYo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\nLink:: https://youtu.be/diBT5iaoAYo\n\n<p>Design your palette at <a href=\"http://paletton.com/\">http://paletton.com/</a><br>Once you are happy with your colors, click Tables&#x2F;Export in the bottom right of the screen:<br><img src=\"https://raw.githubusercontent.com/zsviczian/obsidian-excalidraw-plugin/master/images/scripts-sketch-palette-loader-1.jpg\" alt=\"|400\"><br>Then click “Color swatches&#x2F;as Sketch Palette”</p>\n<p><img src=\"https://raw.githubusercontent.com/zsviczian/obsidian-excalidraw-plugin/master/images/scripts-sketch-palette-loader-2.jpg\" alt=\"|400\"><br>Copy the contents of the page to a markdown file in your vault. Place the file in the Excalidraw&#x2F;Palettes folder (you can change this folder in settings).</p>\n<p><img src=\"https://raw.githubusercontent.com/zsviczian/obsidian-excalidraw-plugin/master/images/scripts-sketch-palette-loader-3.jpg\" alt=\"|400\"></p>\n<p><img src=\"https://raw.githubusercontent.com/zsviczian/obsidian-excalidraw-plugin/master/images/scripts-sketch-palette-loader-4.jpg\" alt=\"|400\"></p>\n<p>Excalidraw  appState Custom Palette Data Object:</p>\n<pre><code class=\"js\">colorPalette: &#123;\n  canvasBackground: [string, string, string, string, string][] | string[],\n  elementBackground: [string, string, string, string, string][] | string[],\n  elementStroke: [string, string, string, string, string][] | string[],\n  topPicks: &#123;\n    canvasBackground: [string, string, string, string, string],\n    elementStroke: [string, string, string, string, string],\n    elementBackground: [string, string, string, string, string] \n  &#125;,\n&#125;\n\n*/\n//--------------------------\n// Load settings\n//--------------------------\nif(!ea.verifyMinimumPluginVersion || !ea.verifyMinimumPluginVersion(&quot;1.9.2&quot;)) &#123;\n  new Notice(&quot;This script requires a newer version of Excalidraw. Please install the latest version.&quot;);\n  return;\n&#125;\n\nconst api = ea.getExcalidrawAPI();\nlet settings = ea.getScriptSettings();\n//set default values on first run\nif(!settings[&quot;Palette folder&quot;]) &#123;\n  settings = &#123;\n    &quot;Palette folder&quot; : &#123;\n      value: &quot;Excalidraw/Palettes&quot;,\n      description: &quot;The path to the folder where you store the Excalidraw Palettes&quot;\n    &#125;,\n    &quot;Light-gray&quot; : &#123;\n      value: &quot;#505050&quot;,\n      description: &quot;Base light-gray used for mixing with the accent color to generate the palette light-gray&quot;\n    &#125;,\n    &quot;Dark-gray&quot; : &#123;\n      value: &quot;#e0e0e0&quot;,\n      description: &quot;Base dark-gray used for mixing with the accent color to generate the palette dark-gray&quot;\n    &#125;\n  &#125;;\n  ea.setScriptSettings(settings);\n&#125;\n\nconst lightGray = settings[&quot;Light-gray&quot;].value;\nconst darkGray = settings[&quot;Dark-gray&quot;].value;\n\nlet paletteFolder = settings[&quot;Palette folder&quot;].value.toLowerCase();\nif(paletteFolder === &quot;&quot; || paletteFolder === &quot;/&quot;) &#123;\n  new Notice(&quot;The palette folder cannot be the root folder of your vault&quot;);\n  return;\n&#125;\n\nif(!paletteFolder.endsWith(&quot;/&quot;)) paletteFolder += &quot;/&quot;;\n\n\n//-----------------------\n// UPDATE CustomPalette\n//-----------------------\nconst updateColorPalette = (paletteFragment) =&gt; &#123;\n  const st = ea.getExcalidrawAPI().getAppState();\n  colorPalette = st.colorPalette ?? &#123;&#125;;\n  if(paletteFragment?.topPicks) &#123;\n    if(!colorPalette.topPicks) &#123;\n      colorPalette.topPicks = &#123;\n        ...paletteFragment.topPicks\n      &#125;;\n    &#125; else &#123;\n      colorPalette.topPicks = &#123;\n        ...colorPalette.topPicks,\n        ...paletteFragment.topPicks\n      &#125;\n    &#125;\n  &#125; else &#123;\n    colorPalette = &#123;\n      ...colorPalette,\n      ...paletteFragment\n    &#125;\n  &#125;\n  ea.viewUpdateScene(&#123;appState: &#123;colorPalette&#125;&#125;);\n  ea.addElementsToView(true,true); //elements is empty, but this will save the file\n&#125;\n\n\n//----------------\n// LOAD PALETTE\n//----------------\nconst loadPalette = async () =&gt; &#123;\n  //--------------------------\n  // Select palette\n  //--------------------------\n  const palettes = app.vault.getFiles()\n    .filter(f=&gt;f.extension === &quot;md&quot; &amp;&amp; f.path.toLowerCase() === paletteFolder + f.name.toLowerCase())\n    .sort((a,b)=&gt;a.basename.toLowerCase()&lt;b.basename.toLowerCase()?-1:1);\n  const file = await utils.suggester([&quot;Excalidraw Default&quot;].concat(palettes.map(f=&gt;f.name)),[&quot;Default&quot;].concat(palettes), &quot;Choose a palette, press ESC to abort&quot;);\n  if(!file) return;\n\n  if(file === &quot;Default&quot;) &#123;\n    api.updateScene(&#123;\n      appState: &#123;\n        colorPalette: &#123;&#125;\n      &#125;\n    &#125;);\n    return;\n  &#125;\n\n  //--------------------------\n  // Load palette\n  //--------------------------\n  const sketchPalette = await app.vault.read(file);\n\n  const parseJSON = (data) =&gt; &#123;\n    try &#123;\n      return JSON.parse(data);\n    &#125; catch(e) &#123;\n      return;\n    &#125;\n  &#125;\n\n  const loadPaletteFromPlainText = (data) =&gt; &#123;\n    const colors = [];\n    data.replaceAll(&quot;\\r&quot;,&quot;&quot;).split(&quot;\\n&quot;).forEach(c=&gt;&#123;\n      c = c.trim();\n      if(c===&quot;&quot;) return;\n      if(c.match(/[^hslrga-fA-F\\(\\d\\.\\,\\%\\s)#]/)) return;\n      const cm = ea.getCM(c);\n      if(cm) colors.push(cm.stringHEX(&#123;alpha: false&#125;));\n    &#125;)\n    return colors;\n  &#125;\n\n  const paletteJSON = parseJSON(sketchPalette);\n\n  const colors = paletteJSON\n    ? paletteJSON.colors.map(c=&gt;ea.getCM(&#123;r:c.red*255,g:c.green*255,b:c.blue*255,a:c.alpha&#125;).stringHEX(&#123;alpha: false&#125;))\n    : loadPaletteFromPlainText(sketchPalette);\n  const baseColor = ea.getCM(colors[0]);\n\n  // Add black, white, transparent, gary\n  const palette = [[\n    &quot;transparent&quot;,\n    &quot;black&quot;,\n    baseColor.mix(&#123;color: lightGray, ratio:0.95&#125;).stringHEX(&#123;alpha: false&#125;),\n    baseColor.mix(&#123;color: darkGray, ratio:0.95&#125;).stringHEX(&#123;alpha: false&#125;),\n    &quot;white&quot;\n  ]];\n\n  // Create Excalidraw palette\n  for(i=0;i&lt;Math.floor(colors.length/5);i++) &#123;\n    palette.push([\n      colors[i*5+1],\n      colors[i*5+2],\n      colors[i*5],\n      colors[i*5+3],\n      colors[i*5+4]\n    ]);\n  &#125;\n\n  const getShades = (c,type) =&gt; &#123;\n    cm = ea.getCM(c);\n    const lightness = cm.lightness;\n    if(lightness === 0 || lightness === 100) return c;\n\n    switch(type) &#123;\n      case &quot;canvas&quot;:\n        return [\n          c,\n          ea.getCM(c).lightnessTo((100-lightness)*0.5+lightness).stringHEX(&#123;alpha: false&#125;),\n          ea.getCM(c).lightnessTo((100-lightness)*0.25+lightness).stringHEX(&#123;alpha: false&#125;),\n          ea.getCM(c).lightnessTo(lightness*0.5).stringHEX(&#123;alpha: false&#125;),\n          ea.getCM(c).lightnessTo(lightness*0.25).stringHEX(&#123;alpha: false&#125;),\n        ];\n      case &quot;stroke&quot;:\n        return [\n          ea.getCM(c).lightnessTo((100-lightness)*0.5+lightness).stringHEX(&#123;alpha: false&#125;),\n          ea.getCM(c).lightnessTo((100-lightness)*0.25+lightness).stringHEX(&#123;alpha: false&#125;),\n          ea.getCM(c).lightnessTo(lightness*0.5).stringHEX(&#123;alpha: false&#125;),\n          ea.getCM(c).lightnessTo(lightness*0.25).stringHEX(&#123;alpha: false&#125;),\n          c,\n        ];\n      case &quot;background&quot;:\n        return [\n          ea.getCM(c).lightnessTo((100-lightness)*0.5+lightness).stringHEX(&#123;alpha: false&#125;),\n          c,\n          ea.getCM(c).lightnessTo((100-lightness)*0.25+lightness).stringHEX(&#123;alpha: false&#125;),\n          ea.getCM(c).lightnessTo(lightness*0.5).stringHEX(&#123;alpha: false&#125;),\n          ea.getCM(c).lightnessTo(lightness*0.25).stringHEX(&#123;alpha: false&#125;),\n        ];\n    &#125;\n  &#125;\n\n  const paletteSize = palette.flat().length;\n  const newPalette = &#123;\n    canvasBackground: palette.flat().map(c=&gt;getShades(c,&quot;canvas&quot;)),\n    elementStroke: palette.flat().map(c=&gt;getShades(c,&quot;stroke&quot;)),\n    elementBackground: palette.flat().map(c=&gt;getShades(c,&quot;background&quot;))\n  &#125;;\n\n\n  //--------------------------\n  // Check if palette has the same size as the current. Is re-paint possible?\n  //--------------------------\n  const oldPalette = api.getAppState().colorPalette;\n\n  //You can only switch and repaint equal size palettes\n  let canRepaint = Boolean(oldPalette) &amp;&amp; Object.keys(oldPalette).length === 3 &amp;&amp;\n    oldPalette.canvasBackground.length  === paletteSize &amp;&amp;\n    oldPalette.elementBackground.length === paletteSize &amp;&amp;\n    oldPalette.elementStroke.length     === paletteSize;\n\n  //Check that the palette for canvas background, element stroke and element background are the same\n  for(i=0;canRepaint &amp;&amp; i&lt;paletteSize;i++) &#123;\n    if(\n      oldPalette.canvasBackground[i] !== oldPalette.elementBackground[i] ||\n      oldPalette.canvasBackground[i] !== oldPalette.elementStroke[i]\n    ) &#123;\n      canRepaint = false;\n      break;\n    &#125;\n  &#125;\n\n  const shouldRepaint = canRepaint &amp;&amp; await utils.suggester([&quot;Try repainting the drawing with the new palette&quot;,&quot;Just load the new palette&quot;], [true, false],&quot;ESC will load the palette without repainting&quot;);\n\n\n  //--------------------------\n  // Apply palette\n  //--------------------------\n  if(shouldRepaint) &#123;\n    const map = new Map();\n    for(i=0;i&lt;paletteSize;i++) &#123;\n      map.set(oldPalette.canvasBackground[i],newPalette.canvasBackground[i])\n    &#125;\n\n    ea.copyViewElementsToEAforEditing(ea.getViewElements());\n    ea.getElements().forEach(el=&gt;&#123;\n      el.strokeColor = map.get(el.strokeColor)??el.strokeColor;\n      el.backgroundColor = map.get(el.backgroundColor)??el.backgroundColor;\n    &#125;)\n\n    const canvasColor = api.getAppState().viewBackgroundColor;\n\n    await api.updateScene(&#123;\n      appState: &#123;\n        viewBackgroundColor: map.get(canvasColor)??canvasColor\n      &#125;\n    &#125;);\n\n    ea.addElementsToView();\n  &#125;\n  updateColorPalette(newPalette);\n&#125;\n\n//-------------\n// TOP PICKS\n//-------------\nconst topPicks = async () =&gt; &#123;\n  const elements = ea.getViewSelectedElements().filter(el=&gt;[&quot;rectangle&quot;, &quot;diamond&quot;, &quot;ellipse&quot;, &quot;line&quot;].includes(el.type));\n  if(elements.length !== 5) &#123;\n    new Notice(&quot;Select 5 elements, the script will use the background color of these elements&quot;,6000);\n    return;\n  &#125;\n\n  const colorType = await utils.suggester([&quot;View Background&quot;, &quot;Element Background&quot;, &quot;Stroke&quot;],[&quot;view&quot;, &quot;background&quot;, &quot;stroke&quot;], &quot;Which top-picks would you like to set?&quot;);\n\n  if(!colorType) &#123;\n    new Notice(&quot;You did not select which color to set&quot;);\n    return;\n  &#125;\n\n  const topPicks = elements.map(el=&gt;el.backgroundColor);\n  switch(colorType) &#123;\n    case &quot;view&quot;: updateColorPalette(&#123;topPicks: &#123;canvasBackground: topPicks&#125;&#125;); break;\n    case &quot;stroke&quot;: updateColorPalette(&#123;topPicks: &#123;elementStroke: topPicks&#125;&#125;); break;\n    default: updateColorPalette(&#123;topPicks: &#123;elementBackground: topPicks&#125;&#125;); break;\n  &#125;\n&#125;\n\n//-----------------------------------\n// Copy palette from another file\n//-----------------------------------\nconst copyPaletteFromFile = async () =&gt; &#123;\n  const files = app.vault.getFiles().filter(f =&gt; ea.isExcalidrawFile(f)).sort((a,b)=&gt;a.name &gt; b.name ? 1 : -1);\n  const file = await utils.suggester(files.map(f=&gt;f.path),files,&quot;Select the file to copy from&quot;);\n  if(!file) &#123;\n    return;\n  &#125;\n  scene = await ea.getSceneFromFile(file);\n  if(!scene || !scene.appState) &#123;\n      new Notice(&quot;unknown error&quot;);\n      return;\n  &#125;\n  ea.viewUpdateScene(&#123;appState: &#123;colorPalette: &#123;...scene.appState.colorPalette&#125;&#125;&#125;);\n  ea.addElementsToView(true,true);\n&#125;\n\n//----------\n// START\n//----------\nconst action = await utils.suggester(\n  [&quot;Load palette from file&quot;, &quot;Set top-picks based on the background color of 5 selected elements&quot;, &quot;Copy palette from another Excalidraw File&quot;],\n  [&quot;palette&quot;,&quot;top-picks&quot;,&quot;copy&quot;]\n);\nif(!action) return;\n\nswitch(action) &#123;\n  case &quot;palette&quot;: loadPalette(); break;\n  case &quot;top-picks&quot;: topPicks(); break;\n  case &quot;copy&quot;: copyPaletteFromFile(); break;\n&#125;\n</code></pre>\n","text":"&#x2F;* Link:: https://youtu.be/epYNx2FSf2w Link:: https://youtu.be/diBT5iaoAYo Design your palette at http://paletton.com/Once you are happ...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"PDF Page Text to Clipboard","uid":"c8987ed647e3062b499b6ebe7475f48f","slug":"PDF Page Text to Clipboard","date":"2023-07-29T10:00:19.283Z","updated":"2023-07-29T10:00:19.401Z","comments":true,"path":"api/articles/PDF Page Text to Clipboard.json","keywords":"Digital Garden","cover":null,"text":"&#x2F;*Copies the text from the selected PDF page on the Excalidraw canvas to the clipboard. Link:: https://youtu.be/Kwt_8WdOUT4 const el = ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Organic Line","uid":"9d7a3d3fc9a4ed838ec1aaa19f2b5092","slug":"Organic Line","date":"2023-07-29T10:00:19.279Z","updated":"2023-07-29T10:00:19.397Z","comments":true,"path":"api/articles/Organic Line.json","keywords":"Digital Garden","cover":[],"text":"&#x2F;* Converts selected freedraw lines such that pencil pressure will decrease from maximum to minimum from the beginning of the line to i...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}