{"title":"Expand rectangles horizontally","uid":"ef1414d6c8c88e321fce206638187e24","slug":"Expand rectangles horizontally","date":"2023-07-29T10:00:19.241Z","updated":"2023-07-29T10:00:19.360Z","comments":true,"path":"api/articles/Expand rectangles horizontally.json","keywords":"Digital Garden","cover":[],"content":"<p>&#x2F;*</p>\n<p><img src=\"https://raw.githubusercontent.com/zsviczian/obsidian-excalidraw-plugin/master/images/scripts-download-raw.jpg\"></p>\n<p>Download this file and save to your Obsidian Vault including the first line, or open it in “Raw” and copy the entire contents to Obsidian.</p>\n<p><img src=\"https://raw.githubusercontent.com/zsviczian/obsidian-excalidraw-plugin/master/images/scripts-expand-rectangles.gif\"></p>\n<p>This script expands the width of the selected rectangles until they are all the same width.</p>\n<p>See documentation for more details:<br><a href=\"https://zsviczian.github.io/obsidian-excalidraw-plugin/ExcalidrawScriptsEngine.html\">https://zsviczian.github.io/obsidian-excalidraw-plugin/ExcalidrawScriptsEngine.html</a></p>\n<pre><code class=\"javascript\">*/\n\nconst elements = ea.getViewSelectedElements();\nconst topGroups = ea.getMaximumGroups(elements);\nconst allIndividualArrows = ea.getMaximumGroups(ea.getViewElements())\n    .reduce((result, group) =&gt; (group.length === 1 &amp;&amp; (group[0].type === &#39;arrow&#39; || group[0].type === &#39;line&#39;)) ? \n            [...result, group[0]] : result, []);\n\nconst groupWidths = topGroups\n  .map((g) =&gt; &#123;\n    if(g.length === 1 &amp;&amp; (g[0].type === &#39;arrow&#39; || g[0].type === &#39;line&#39;)) &#123;\n      // ignore individual lines\n      return &#123; minLeft: 0, maxRight: 0 &#125;;\n    &#125;\n    return g.reduce(\n      (pre, cur, i) =&gt; &#123;\n        if (i === 0) &#123;\n          return &#123;\n            minLeft: cur.x,\n            maxRight: cur.x + cur.width,\n            index: i,\n          &#125;;\n        &#125; else &#123;\n          return &#123;\n            minLeft: cur.x &lt; pre.minLeft ? cur.x : pre.minLeft,\n            maxRight:\n              cur.x + cur.width &gt; pre.maxRight\n                ? cur.x + cur.width\n                : pre.maxRight,\n            index: i,\n          &#125;;\n        &#125;\n      &#125;,\n      &#123; minLeft: 0, maxRight: 0 &#125;\n    );\n  &#125;)\n  .map((r) =&gt; &#123;\n    r.width = r.maxRight - r.minLeft;\n    return r;\n  &#125;);\n\nconst maxGroupWidth = Math.max(...groupWidths.map((g) =&gt; g.width));\n\nfor (var i = 0; i &lt; topGroups.length; i++) &#123;\n  const rects = topGroups[i]\n    .filter((el) =&gt; el.type === &quot;rectangle&quot;)\n    .sort((lha, rha) =&gt; lha.x - rha.x);\n  \n  const groupWith = groupWidths[i].width;\n  if (groupWith &lt; maxGroupWidth) &#123;\n    const distance = maxGroupWidth - groupWith;\n    const perRectDistance = distance / rects.length;\n    for (var j = 0; j &lt; rects.length; j++) &#123;\n      const rect = rects[j];\n      rect.x = rect.x + perRectDistance * j;\n      rect.width += perRectDistance;\n\n      // recalculate the position of the points\n      const startBindingLines = allIndividualArrows.filter(el =&gt; (el.startBinding||&#123;&#125;).elementId === rect.id);\n         for(startBindingLine of startBindingLines) &#123;\n             recalculateStartPointOfLine(startBindingLine, rect);\n         &#125;\n     \n         const endBindingLines = allIndividualArrows.filter(el =&gt; (el.endBinding||&#123;&#125;).elementId === rect.id);\n         for(endBindingLine of endBindingLines) &#123;\n             recalculateEndPointOfLine(endBindingLine, rect);\n         &#125;\n    &#125;\n  &#125;\n&#125;\n\nea.copyViewElementsToEAforEditing(elements);\nawait ea.addElementsToView(false, false);\n\nfunction recalculateStartPointOfLine(line, el) &#123;\n    const aX = el.x + el.width/2;\n    const bX = line.x + line.points[1][0];\n    const aY = el.y + el.height/2;\n    const bY = line.y + line.points[1][1];\n\n    line.startBinding.gap = 8;\n    line.startBinding.focus = 0;\n    const intersectA = ea.intersectElementWithLine(\n                el,\n                [bX, bY],\n                [aX, aY],\n                line.startBinding.gap\n              );\n\n    if(intersectA.length &gt; 0) &#123;\n        line.points[0] = [0, 0];\n        for(var i = 1; i&lt;line.points.length; i++) &#123;\n            line.points[i][0] -= intersectA[0][0] - line.x;\n            line.points[i][1] -= intersectA[0][1] - line.y;\n        &#125;\n        line.x = intersectA[0][0];\n        line.y = intersectA[0][1];\n    &#125;\n&#125;\n\nfunction recalculateEndPointOfLine(line, el) &#123;\n    const aX = el.x + el.width/2;\n    const bX = line.x + line.points[line.points.length-2][0];\n    const aY = el.y + el.height/2;\n    const bY = line.y + line.points[line.points.length-2][1];\n\n    line.endBinding.gap = 8;\n    line.endBinding.focus = 0;\n    const intersectA = ea.intersectElementWithLine(\n                el,\n                [bX, bY],\n                [aX, aY],\n                line.endBinding.gap\n              );\n\n    if(intersectA.length &gt; 0) &#123;\n        line.points[line.points.length - 1] = [intersectA[0][0] - line.x, intersectA[0][1] - line.y];\n    &#125;\n&#125;\n</code></pre>\n","text":"&#x2F;* Download this file and save to your Obsidian Vault including the first line, or open it in “Raw” and copy the entire contents to Obs...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Expand rectangles vertically keep text centered","uid":"5ca1a57b4a16def73a8a03cc90761396","slug":"Expand rectangles vertically keep text centered","date":"2023-07-29T10:00:19.243Z","updated":"2023-07-29T10:00:19.361Z","comments":true,"path":"api/articles/Expand rectangles vertically keep text centered.json","keywords":"Digital Garden","cover":[],"text":"&#x2F;* Download this file and save to your Obsidian Vault including the first line, or open it in “Raw” and copy the entire contents to Obs...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Expand rectangles horizontally keep text centered","uid":"8a56f73b00ef50469e40d7f3c1e8a217","slug":"Expand rectangles horizontally keep text centered","date":"2023-07-29T10:00:19.239Z","updated":"2023-07-29T10:00:19.359Z","comments":true,"path":"api/articles/Expand rectangles horizontally keep text centered.json","keywords":"Digital Garden","cover":[],"text":"&#x2F;* Download this file and save to your Obsidian Vault including the first line, or open it in “Raw” and copy the entire contents to Obs...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}