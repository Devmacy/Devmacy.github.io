{"title":"Box Each Selected Groups","uid":"1f6284048f0d626a1ed81fc1a62dfb0d","slug":"Box Each Selected Groups","date":"2023-07-29T10:00:19.207Z","updated":"2023-07-29T10:00:19.340Z","comments":true,"path":"api/articles/Box Each Selected Groups.json","keywords":"Digital Garden","cover":[],"content":"<p>&#x2F;*<br><img src=\"https://raw.githubusercontent.com/zsviczian/obsidian-excalidraw-plugin/master/images/scripts-download-raw.jpg\"></p>\n<p>Download this file and save to your Obsidian Vault including the first line, or open it in “Raw” and copy the entire contents to Obsidian.</p>\n<p><img src=\"https://raw.githubusercontent.com/zsviczian/obsidian-excalidraw-plugin/master/images/scripts-box-each-selected-groups.png\"></p>\n<p>This script will add encapsulating boxes around each of the currently selected groups in Excalidraw.</p>\n<p>You can focus on content creation first, and then batch add consistent style boxes to each group of text.</p>\n<p>Tips 1: You can copy the desired style to the global state using script <code>Copy Selected Element Style to Global</code>, then add boxes with the same global style using script <code>Box Each Selected Groups</code>.</p>\n<p>Tips 2: Next you can use scripts <code>Expand rectangles horizontally keep text centered</code> and <code>Expand rectangles vertically keep text centered</code> to make the boxes the same size, if you wish.</p>\n<p>Tips 3: If you want the left and right margins to be different from the top and bottom margins, input something like <code>32,16</code>, this will create a box with left and right margins of <code>32</code> and top and bottom margins of <code>16</code>.</p>\n<p>See documentation for more details:<br><a href=\"https://zsviczian.github.io/obsidian-excalidraw-plugin/ExcalidrawScriptsEngine.html\">https://zsviczian.github.io/obsidian-excalidraw-plugin/ExcalidrawScriptsEngine.html</a></p>\n<pre><code class=\"javascript\">*/\nif(!ea.verifyMinimumPluginVersion || !ea.verifyMinimumPluginVersion(&quot;1.5.21&quot;)) &#123;\n  new Notice(&quot;This script requires a newer version of Excalidraw. Please install the latest version.&quot;);\n  return;\n&#125;\nsettings = ea.getScriptSettings();\n//set default values on first run\nif(!settings[&quot;Default padding&quot;]) &#123;\n    settings = &#123;\n      &quot;Prompt for padding?&quot;: true,\n      &quot;Default padding&quot; : &#123;\n            value: 10,\n          description: &quot;Padding between the bounding box of the selected elements, and the box the script creates&quot;\n      &#125;,\n      &quot;Remember last padding?&quot;: false\n    &#125;;\n    ea.setScriptSettings(settings);\n&#125;\n\nlet paddingStr = settings[&quot;Default padding&quot;].value.toString();\nconst rememberLastPadding = settings[&quot;Remember last padding?&quot;];\n\nif(settings[&quot;Prompt for padding?&quot;]) &#123;\n    paddingStr = await utils.inputPrompt(&quot;padding?&quot;,&quot;string&quot;,paddingStr);\n&#125;\nif(!paddingStr) &#123;\n    return;\n&#125;\nif(rememberLastPadding) &#123;\n    settings[&quot;Default padding&quot;].value = paddingStr;\n    ea.setScriptSettings(settings);\n&#125;\nvar paddingLR = 0;\nvar paddingTB = 0;\nif(paddingStr.indexOf(&#39;,&#39;) &gt; 0) &#123;\n    const paddingParts = paddingStr.split(&#39;,&#39;);\n    paddingLR = parseInt(paddingParts[0]);\n    paddingTB = parseInt(paddingParts[1]);\n&#125;\nelse &#123;\n    paddingLR = paddingTB = parseInt(paddingStr);\n&#125;\n\nif(isNaN(paddingLR) || isNaN(paddingTB)) &#123;\n    return;\n&#125;\n\nconst selectedElements = ea.getViewSelectedElements();\nconst groups = ea.getMaximumGroups(selectedElements);\nconst allIndividualArrows = ea.getMaximumGroups(ea.getViewElements())\n    .reduce((result, group) =&gt; (group.length === 1 &amp;&amp; (group[0].type === &#39;arrow&#39; || group[0].type === &#39;line&#39;)) ? \n            [...result, group[0]] : result, []);\nfor(const elements of groups) &#123;\n    if(elements.length === 1 &amp;&amp; elements[0].type ===&quot;arrow&quot; || elements[0].type===&quot;line&quot;) &#123;\n        // individual arrows or lines are not affected\n        continue;\n    &#125;\n    const box = ea.getBoundingBox(elements);\n    color = ea\n            .getExcalidrawAPI()\n            .getAppState()\n            .currentItemStrokeColor;\n    // use current stroke with and style\n    const appState = ea.getExcalidrawAPI().getAppState();\n    const strokeWidth = appState.currentItemStrokeWidth;\n    const strokeStyle = appState.currentItemStrokeStyle;\n    const strokeSharpness = appState.currentItemStrokeSharpness;\n    const roughness = appState.currentItemRoughness;\n    const fillStyle = appState.currentItemFillStyle;\n    const backgroundColor = appState.currentItemBackgroundColor;\n    ea.style.strokeWidth = strokeWidth;\n    ea.style.strokeStyle = strokeStyle;\n    ea.style.strokeSharpness = strokeSharpness;\n    ea.style.roughness = roughness;\n    ea.style.fillStyle = fillStyle;\n    ea.style.backgroundColor = backgroundColor;\t\n    ea.style.strokeColor = color;\n\n    const id = ea.addRect(\n        box.topX - paddingLR,\n        box.topY - paddingTB,\n        box.width + 2*paddingLR,\n        box.height + 2*paddingTB\n    );\n\n    // Change the join point in the group to the new box\n    const elementsWithBounded = elements.filter(el =&gt; (el.boundElements || []).length &gt; 0);\n    const boundedElementsCollection = elementsWithBounded.reduce((result, el) =&gt; [...result, ...el.boundElements], []);\n    for(const el of elementsWithBounded) &#123;\n        el.boundElements = [];\n    &#125;\n\n    const newRect = ea.getElement(id);\n    newRect.boundElements = boundedElementsCollection;\n\n    const elementIds = elements.map(el =&gt; el.id);\n\n    const startBindingLines = allIndividualArrows.filter(el =&gt; elementIds.includes((el.startBinding||&#123;&#125;).elementId));\n    for(startBindingLine of startBindingLines) &#123;\n        startBindingLine.startBinding.elementId = id;\n        recalculateStartPointOfLine(startBindingLine, newRect);\n    &#125;\n\n    const endBindingLines = allIndividualArrows.filter(el =&gt; elementIds.includes((el.endBinding||&#123;&#125;).elementId));\n    for(endBindingLine of endBindingLines) &#123;\n        endBindingLine.endBinding.elementId = id;\n        recalculateEndPointOfLine(endBindingLine, newRect);\n    &#125;\n\n    ea.copyViewElementsToEAforEditing(elements);\n    ea.addToGroup([id].concat(elements.map((el)=&gt;el.id)));\n&#125;\n\nawait ea.addElementsToView(false,false);\n\nfunction recalculateStartPointOfLine(line, el) &#123;\n    const aX = el.x + el.width/2;\n    const bX = line.x + line.points[1][0];\n    const aY = el.y + el.height/2;\n    const bY = line.y + line.points[1][1];\n\n    line.startBinding.gap = 8;\n    line.startBinding.focus = 0;\n    const intersectA = ea.intersectElementWithLine(\n                el,\n                [bX, bY],\n                [aX, aY],\n                line.startBinding.gap\n              );\n\n    if(intersectA.length &gt; 0) &#123;\n        line.points[0] = [0, 0];\n        for(var i = 1; i&lt;line.points.length; i++) &#123;\n            line.points[i][0] -= intersectA[0][0] - line.x;\n            line.points[i][1] -= intersectA[0][1] - line.y;\n        &#125;\n        line.x = intersectA[0][0];\n        line.y = intersectA[0][1];\n    &#125;\n&#125;\n\nfunction recalculateEndPointOfLine(line, el) &#123;\n    const aX = el.x + el.width/2;\n    const bX = line.x + line.points[line.points.length-2][0];\n    const aY = el.y + el.height/2;\n    const bY = line.y + line.points[line.points.length-2][1];\n\n    line.endBinding.gap = 8;\n    line.endBinding.focus = 0;\n    const intersectA = ea.intersectElementWithLine(\n                el,\n                [bX, bY],\n                [aX, aY],\n                line.endBinding.gap\n              );\n\n    if(intersectA.length &gt; 0) &#123;\n        line.points[line.points.length - 1] = [intersectA[0][0] - line.x, intersectA[0][1] - line.y];\n    &#125;\n&#125;\n</code></pre>\n","text":"&#x2F;* Download this file and save to your Obsidian Vault including the first line, or open it in “Raw” and copy the entire contents to Obs...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Box Selected Elements","uid":"cba608aa7fc3ed1d75673bd983bf4402","slug":"Box Selected Elements","date":"2023-07-29T10:00:19.209Z","updated":"2023-07-29T10:00:19.340Z","comments":true,"path":"api/articles/Box Selected Elements.json","keywords":"Digital Garden","cover":[],"text":"&#x2F;* This script will add an encapsulating box around the currently selected elements in Excalidraw. See documentation for more details:h...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Auto Layout","uid":"93126ca1dba62bd049917d90fc642684","slug":"Auto Layout","date":"2023-07-29T10:00:19.205Z","updated":"2023-07-29T10:00:19.335Z","comments":true,"path":"api/articles/Auto Layout.json","keywords":"Digital Garden","cover":[],"text":"&#x2F;* Download this file and save to your Obsidian Vault including the first line, or open it in “Raw” and copy the entire contents to Obs...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[],"tags":[],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}