{"title":"Scribble Helper","uid":"783f38c95bffc6fc70117678c5bd20cf","slug":"Scribble Helper","date":"2023-07-29T10:00:19.291Z","updated":"2023-07-29T10:00:19.410Z","comments":true,"path":"api/articles/Scribble Helper.json","keywords":"Digital Garden","cover":[],"content":"<p>&#x2F;*<br><img src=\"https://raw.githubusercontent.com/zsviczian/obsidian-excalidraw-plugin/master/images/scripts-scribble-helper.jpg\"></p>\n<p>Scribble Helper can improve handwriting and add links. It lets you create and edit text elements, including wrapped text and sticky notes, by double-tapping on the canvas. When you run the script, it creates an event handler that will activate the editor when you double-tap. If you select a text element on the canvas before running the script, it will open the editor for that element. If you use a pen, you can set it up to only activate Scribble Helper when you double-tap with the pen. The event handler is removed when you run the script a second time or switch to a different tab.</p>\n<pre><code class=\"javascript\">*/\nif(!ea.verifyMinimumPluginVersion || !ea.verifyMinimumPluginVersion(&quot;1.8.25&quot;)) &#123;\n  new Notice(&quot;This script requires a newer version of Excalidraw. Please install the latest version.&quot;);\n  return;\n&#125;\n\nconst helpLINK = &quot;https://youtu.be/BvYkOaly-QM&quot;;\nconst DBLCLICKTIMEOUT = 300;\nconst maxWidth = 600;\nconst padding = 6;\nconst api = ea.getExcalidrawAPI();\nconst win = ea.targetView.ownerWindow;\nif(!win.ExcalidrawScribbleHelper) win.ExcalidrawScribbleHelper = &#123;&#125;;\nif(typeof win.ExcalidrawScribbleHelper.penOnly === &quot;undefined&quot;) &#123;\n  win.ExcalidrawScribbleHelper.penOnly = false;\n&#125;\nlet windowOpen = false; //to prevent the modal window to open again while writing with scribble\nlet prevZoomValue = api.getAppState().zoom.value; //used to avoid trigger on pinch zoom\n\n// -------------\n// Load settings\n// -------------\nlet settings = ea.getScriptSettings();\n//set default values on first-ever run of the script\nif(!settings[&quot;Default action&quot;]) &#123;\n  settings = &#123;\n    &quot;Default action&quot; : &#123;\n      value: &quot;Text&quot;,\n      valueset: [&quot;Text&quot;,&quot;Sticky&quot;,&quot;Wrap&quot;],\n      description: &quot;What type of element should CTRL/CMD+ENTER create. TEXT: A regular text element. &quot; +\n        &quot;STICKY: A sticky note with border color and background color &quot; +\n        &quot;(using the current setting of the canvas). STICKY: A sticky note with transparent &quot; +\n        &quot;border and background color.&quot;\n    &#125;,\n  &#125;;\n  await ea.setScriptSettings(settings);\n&#125;\n\nif(typeof win.ExcalidrawScribbleHelper.action === &quot;undefined&quot;) &#123;\n  win.ExcalidrawScribbleHelper.action = settings[&quot;Default action&quot;].value;\n&#125;\n\n//---------------------------------------\n// Color Palette for stroke color setting\n//---------------------------------------\n// https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/1.6.8\nconst defaultStrokeColors = [\n    &quot;#000000&quot;, &quot;#343a40&quot;, &quot;#495057&quot;, &quot;#c92a2a&quot;, &quot;#a61e4d&quot;,\n    &quot;#862e9c&quot;, &quot;#5f3dc4&quot;, &quot;#364fc7&quot;, &quot;#1864ab&quot;, &quot;#0b7285&quot;,\n    &quot;#087f5b&quot;, &quot;#2b8a3e&quot;, &quot;#5c940d&quot;, &quot;#e67700&quot;, &quot;#d9480f&quot;\n  ];\n\nconst loadColorPalette = () =&gt; &#123;\n  const st = api.getAppState();\n  const strokeColors = new Set();\n  let strokeColorPalette = st.colorPalette?.elementStroke ?? defaultStrokeColors;\n  if(Object.entries(strokeColorPalette).length === 0) &#123;\n    strokeColorPalette = defaultStrokeColors;\n  &#125;\n\n  ea.getViewElements().forEach(el =&gt; &#123;\n    if(el.strokeColor.toLowerCase()===&quot;transparent&quot;) return;\n    strokeColors.add(el.strokeColor);\n  &#125;);\n\n  strokeColorPalette.forEach(color =&gt; &#123;\n    strokeColors.add(color)\n  &#125;);\n\n  strokeColors.add(st.currentItemStrokeColor ?? ea.style.strokeColor);\n  return strokeColors;\n&#125;\n\n//----------------------------------------------------------\n// Define variables to cache element location on first click\n//----------------------------------------------------------\n// if a single element is selected when the action is started, update that existing text\nlet containerElements = ea.getViewSelectedElements()\n  .filter(el=&gt;[&quot;arrow&quot;,&quot;rectangle&quot;,&quot;ellipse&quot;,&quot;line&quot;,&quot;diamond&quot;].contains(el.type));\nlet selectedTextElements = ea.getViewSelectedElements().filter(el=&gt;el.type===&quot;text&quot;);\n\n//-------------------------------------------\n// Functions to add and remove event listners\n//-------------------------------------------\nconst addEventHandler = (handler) =&gt; &#123;\n  if(win.ExcalidrawScribbleHelper.eventHandler) &#123;\n    win.removeEventListner(&quot;pointerdown&quot;, handler);\n  &#125;\n  win.addEventListener(&quot;pointerdown&quot;,handler);\n  win.ExcalidrawScribbleHelper.eventHandler = handler;\n  win.ExcalidrawScribbleHelper.window = win;\n&#125;\n\nconst removeEventHandler = (handler) =&gt; &#123;\n  win.removeEventListener(&quot;pointerdown&quot;,handler);\n  delete win.ExcalidrawScribbleHelper.eventHandler;\n  delete win.ExcalidrawScribbleHelper.window;\n&#125;\n\n//Stop the script if scribble helper is clicked and no eligable element is selected\nlet silent = false;\nif (win.ExcalidrawScribbleHelper?.eventHandler) &#123;\n  removeEventHandler(win.ExcalidrawScribbleHelper.eventHandler);\n  delete win.ExcalidrawScribbleHelper.eventHandler;\n  delete win.ExcalidrawScribbleHelper.window;\n  if(!(containerElements.length === 1 || selectedTextElements.length === 1)) &#123;\n    new Notice (&quot;Scribble Helper was stopped&quot;,1000);\n    return;\n  &#125;\n  silent = true;\n&#125;\n\n// ----------------------\n// Custom dialog controls\n// ----------------------\nif (typeof win.ExcalidrawScribbleHelper.penOnly === &quot;undefined&quot;) &#123;\n  win.ExcalidrawScribbleHelper.penOnly = undefined;\n&#125;\nif (typeof win.ExcalidrawScribbleHelper.penDetected === &quot;undefined&quot;) &#123;\n  win.ExcalidrawScribbleHelper.penDetected = false;\n&#125;\nlet timer = Date.now();\nlet eventHandler = () =&gt; &#123;&#125;;\n\nconst customControls =  (container) =&gt; &#123;\n  const helpDIV = container.createDiv();\n  helpDIV.innerHTML = `&lt;a href=&quot;$&#123;helpLINK&#125;&quot; target=&quot;_blank&quot;&gt;Click here for help&lt;/a&gt;`;\n  const viewBackground = api.getAppState().viewBackgroundColor;\n  const el1 = new ea.obsidian.Setting(container)\n    .setName(`Text color`)\n    .addDropdown(dropdown =&gt; &#123;\n      Array.from(loadColorPalette()).forEach(color =&gt; &#123;\n        const options = dropdown.addOption(color, color).selectEl.options;\n        options[options.length-1].setAttribute(&quot;style&quot;,`color: $&#123;color\n          &#125;; background: $&#123;viewBackground&#125;;`);\n      &#125;);\n      dropdown\n        .setValue(ea.style.strokeColor)\n        .onChange(value =&gt; &#123;\n          ea.style.strokeColor = value;\n          el1.nameEl.style.color = value;\n        &#125;)\n    &#125;)\n  el1.nameEl.style.color = ea.style.strokeColor;\n  el1.nameEl.style.background = viewBackground;\n  el1.nameEl.style.fontWeight = &quot;bold&quot;;\n                                 \n  const el2 = new ea.obsidian.Setting(container)\n    .setName(`Trigger editor by pen double tap only`)\n    .addToggle((toggle) =&gt; toggle\n      .setValue(win.ExcalidrawScribbleHelper.penOnly)\n      .onChange(value =&gt; &#123;\n        win.ExcalidrawScribbleHelper.penOnly = value;\n      &#125;)\n    )\n  el2.settingEl.style.border = &quot;none&quot;;\n  el2.settingEl.style.display = win.ExcalidrawScribbleHelper.penDetected ? &quot;&quot; : &quot;none&quot;;\n&#125;\n\n// -------------------------------\n// Click / dbl click event handler\n// -------------------------------\neventHandler = async (evt) =&gt; &#123;\n  if(windowOpen) return;\n  if(ea.targetView !== app.workspace.activeLeaf.view) removeEventHandler(eventHandler);\n  if(evt &amp;&amp; evt.target &amp;&amp; !evt.target.hasClass(&quot;excalidraw__canvas&quot;)) return;\n  if(evt &amp;&amp; (evt.ctrlKey || evt.altKey || evt.metaKey || evt.shiftKey)) return;  \n  const st = api.getAppState();\n  win.ExcalidrawScribbleHelper.penDetected = st.penDetected;\n  \n  //don&#39;t trigger text editor when editing a line or arrow\n  if(st.editingElement &amp;&amp; [&quot;arrow&quot;,&quot;line&quot;].contains(st.editingElment.type)) return; \n  \n  if(typeof win.ExcalidrawScribbleHelper.penOnly === &quot;undefined&quot;) &#123;\n    win.ExcalidrawScribbleHelper.penOnly = false;\n  &#125;\n  \n  if (evt &amp;&amp; win.ExcalidrawScribbleHelper.penOnly &amp;&amp;\n    win.ExcalidrawScribbleHelper.penDetected &amp;&amp; evt.pointerType !== &quot;pen&quot;) return;\n  const now = Date.now();\n  \n  //the &lt;50 condition is to avoid false double click when pinch zooming\n  if((now-timer &gt; DBLCLICKTIMEOUT) || (now-timer &lt; 50)) &#123;\n    prevZoomValue = st.zoom.value;\n    timer = now;\n    containerElements = ea.getViewSelectedElements()\n      .filter(el=&gt;[&quot;arrow&quot;,&quot;rectangle&quot;,&quot;ellipse&quot;,&quot;line&quot;,&quot;diamond&quot;].contains(el.type));\n    selectedTextElements = ea.getViewSelectedElements().filter(el=&gt;el.type===&quot;text&quot;);\n      return;\n  &#125;\n  //further safeguard against triggering when pinch zooming\n  if(st.zoom.value !== prevZoomValue) return;\n  \n  //sleeping to allow keyboard to pop up on mobile devices\n  await sleep(200);\n  ea.clear();\n\n  //if a single element with text is selected, edit the text\n  //(this can be an arrow, a sticky note, or just a text element)\n  if(selectedTextElements.length === 1) &#123;\n    editExistingTextElement(selectedTextElements);\n    return;\n  &#125;\n  \n  let containerID;\n  let container;\n  //if no text elements are selected (i.e. not multiple text  elements selected),\n  //check if there is a single eligeable container selected\n  if(selectedTextElements.length === 0) &#123;\n    if(containerElements.length === 1) &#123;\n      ea.copyViewElementsToEAforEditing(containerElements);\n      containerID = containerElements[0].id\n      container = ea.getElement(containerID);\n    &#125;\n  &#125;\n  \n  const &#123;x,y&#125; = ea.targetView.currentPosition;\n\n  if(ea.targetView !== app.workspace.activeLeaf.view) return;\n  const actionButtons = [\n    &#123;\n      caption: `A`,\n      tooltip: &quot;Add as Text Element&quot;,\n      action: () =&gt; &#123;\n        win.ExcalidrawScribbleHelper.action=&quot;Text&quot;;\n        if(settings[&quot;Default action&quot;].value!==&quot;Text&quot;) &#123;\n          settings[&quot;Default action&quot;].value = &quot;Text&quot;;\n          ea.setScriptSettings(settings);\n        &#125;;\n        return;\n      &#125;\n    &#125;,\n    &#123;\n      caption: &quot;📝&quot;,\n      tooltip: &quot;Add as Sticky Note (rectangle with border color and background color)&quot;,\n      action: () =&gt; &#123;\n        win.ExcalidrawScribbleHelper.action=&quot;Sticky&quot;;\n        if(settings[&quot;Default action&quot;].value!==&quot;Sticky&quot;) &#123;\n          settings[&quot;Default action&quot;].value = &quot;Sticky&quot;;\n          ea.setScriptSettings(settings);\n        &#125;;\n        return;\n      &#125;\n    &#125;,\n    &#123;\n      caption: &quot;☱&quot;,\n      tooltip: &quot;Add as Wrapped Text (rectangle with transparent border and background)&quot;,\n      action: () =&gt; &#123;\n        win.ExcalidrawScribbleHelper.action=&quot;Wrap&quot;;\n        if(settings[&quot;Default action&quot;].value!==&quot;Wrap&quot;) &#123;\n          settings[&quot;Default action&quot;].value = &quot;Wrap&quot;;\n          ea.setScriptSettings(settings);\n        &#125;;\n        return;\n      &#125;\n    &#125;\n  ];\n  if(win.ExcalidrawScribbleHelper.action !== &quot;Text&quot;) actionButtons.push(actionButtons.shift());\n  if(win.ExcalidrawScribbleHelper.action === &quot;Wrap&quot;) actionButtons.push(actionButtons.shift());\n\n  ea.style.strokeColor = st.currentItemStrokeColor ?? ea.style.strokeColor;\n  ea.style.roughness = st.currentItemRoughness ?? ea.style.roughness;\n  ea.setStrokeSharpness(st.currentItemRoundness === &quot;round&quot; ? 0 : st.currentItemRoundness)\n  ea.style.backgroundColor = st.currentItemBackgroundColor ?? ea.style.backgroundColor;\n  ea.style.fillStyle = st.currentItemFillStyle ?? ea.style.fillStyle;\n  ea.style.fontFamily = st.currentItemFontFamily ?? ea.style.fontFamily;\n  ea.style.fontSize = st.currentItemFontSize ?? ea.style.fontSize;\n  ea.style.textAlign = (container &amp;&amp; [&quot;arrow&quot;,&quot;line&quot;].contains(container.type))\n    ? &quot;center&quot;\n    : (container &amp;&amp; [&quot;rectangle&quot;,&quot;diamond&quot;,&quot;ellipse&quot;].contains(container.type))\n      ? &quot;center&quot;\n      : st.currentItemTextAlign ?? &quot;center&quot;;\n  ea.style.verticalAlign = &quot;middle&quot;;\n\n  windowOpen = true;\n  const text = await utils.inputPrompt (\n    &quot;Edit text&quot;, &quot;&quot;, &quot;&quot;, containerID?undefined:actionButtons, 5, true, customControls, true\n  );\n  windowOpen = false;\n\n  if(!text || text.trim() === &quot;&quot;) return;\n\n  const textId = ea.addText(x,y, text);\n  if (!container &amp;&amp; (win.ExcalidrawScribbleHelper.action === &quot;Text&quot;)) &#123;\n    ea.addElementsToView(false, false, true);\n    addEventHandler(eventHandler);\n    return;\n  &#125;\n  const textEl = ea.getElement(textId);\n\n  if(!container &amp;&amp; (win.ExcalidrawScribbleHelper.action === &quot;Wrap&quot;)) &#123;\n    ea.style.backgroundColor = &quot;transparent&quot;;\n    ea.style.strokeColor = &quot;transparent&quot;;\n  &#125;\n\n  if(!container &amp;&amp; (win.ExcalidrawScribbleHelper.action === &quot;Sticky&quot;)) &#123;\n    textEl.textAlign = &quot;center&quot;;\n  &#125;\n\n  const boxes = [];\n  if(container) &#123;\n    boxes.push(containerID);\n    const linearElement = [&quot;arrow&quot;,&quot;line&quot;].contains(container.type);\n    const l = linearElement ? container.points.length-1 : 0;\n    const dx = linearElement &amp;&amp; (container.points[l][0] &lt; 0) ? -1 : 1;\n    const dy = linearElement &amp;&amp; (container.points[l][1] &lt; 0) ? -1 : 1;\n    cx = container.x + dx*container.width/2;\n    cy = container.y + dy*container.height/2;\n    textEl.x = cx - textEl.width/2;\n    textEl.y = cy - textEl.height/2;\n  &#125;\n\n  if(!container) &#123;\n    const width = textEl.width+2*padding;\n    const widthOK = width&lt;=maxWidth;\n    containerID = ea.addRect(\n      textEl.x-padding,\n      textEl.y-padding,\n      widthOK ? width : maxWidth,\n      textEl.height + 2 * padding\n    );\n    container = ea.getElement(containerID);\n  &#125; \n  boxes.push(containerID);\n  container.boundElements=[&#123;type:&quot;text&quot;,id: textId&#125;];\n  textEl.containerId = containerID;\n  //ensuring the correct order of elements, first container, then text\n  delete ea.elementsDict[textEl.id];\n  ea.elementsDict[textEl.id] = textEl;\n\n  await ea.addElementsToView(false,false,true);\n  const containers = ea.getViewElements().filter(el=&gt;boxes.includes(el.id));\n  if([&quot;rectangle&quot;,&quot;diamond&quot;,&quot;ellipse&quot;].includes(container.type)) api.updateContainerSize(containers);\n  ea.selectElementsInView(containers);\n&#125;;\n\n// ---------------------\n// Edit Existing Element\n// ---------------------\nconst editExistingTextElement = async (elements) =&gt; &#123;\n  windowOpen = true;\n  ea.copyViewElementsToEAforEditing(elements);\n  const el = ea.getElements()[0];\n  ea.style.strokeColor = el.strokeColor;\n  const text = await utils.inputPrompt(\n    &quot;Edit text&quot;,&quot;&quot;,elements[0].rawText,undefined,5,true,customControls,true\n  ); \n  windowOpen = false;\n  if(!text) return;\n  \n  el.strokeColor = ea.style.strokeColor;\n  el.originalText = text;\n  el.text = text;\n  el.rawText = text;\n  ea.refreshTextElementSize(el.id);\n  await ea.addElementsToView(false,false);\n  if(el.containerId) &#123;\n    const containers = ea.getViewElements().filter(e=&gt;e.id === el.containerId);\n    api.updateContainerSize(containers);\n    ea.selectElementsInView(containers);\n  &#125;\n&#125;\n\n//--------------\n// Start actions\n//--------------\nif(!win.ExcalidrawScribbleHelper?.eventHandler) &#123;\n  if(!silent) new Notice(\n    &quot;To create a new text element,\\ndouble-tap the screen.\\n\\n&quot; +\n    &quot;To edit text,\\ndouble-tap an existing element.\\n\\n&quot; +\n    &quot;To stop the script,\\ntap it again or switch to a different tab.&quot;,\n    5000\n  );\n  addEventHandler(eventHandler);\n&#125;\n\nif(containerElements.length === 1 || selectedTextElements.length === 1) &#123;\n  timer = timer - 100;\n  eventHandler();\n&#125;\n</code></pre>\n","text":"&#x2F;* Scribble Helper can improve handwriting and add links. It lets you create and edit text elements, including wrapped text and sticky ...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Select Elements of Type","uid":"d63d52fab50d4e7787db7464cd2acc66","slug":"Select Elements of Type","date":"2023-07-29T10:00:19.293Z","updated":"2023-07-29T10:00:19.411Z","comments":true,"path":"api/articles/Select Elements of Type.json","keywords":"Digital Garden","cover":[],"text":"&#x2F;*Prompts you with a list of the different element types in the active image. Only elements of the selected type will be selected on th...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Reverse arrows","uid":"19078ee4c978271aa8e1231ea4870b9c","slug":"Reverse arrows","date":"2023-07-29T10:00:19.289Z","updated":"2023-07-29T10:00:19.407Z","comments":true,"path":"api/articles/Reverse arrows.json","keywords":"Digital Garden","cover":[],"text":"&#x2F;* Download this file and save to your Obsidian Vault including the first line, or open it in “Raw” and copy the entire contents to Obs...","link":"","photos":[],"count_time":{"symbolsCount":702,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}