{"name":"TypeScript","slug":"TypeScript","count":6,"postlist":[{"title":"TypeScript any和unkonwn","uid":"de995f2c1bc5e7da2cf3c1596e98c591","slug":"TypeScript any和unkonwn","date":"2023-07-07T17:47:16.102Z","updated":"2023-07-07T17:47:16.247Z","comments":true,"path":"api/articles/TypeScript any和unkonwn.json","keywords":"Digital Garden","cover":null,"text":"#TypeScript 区别 any unknown 定义 任何类型 任何类型 安全 类型检查 赋值 只能赋值给 any 和 unkonwn 交叉 any ∩ T &#x3D; any unknown ∩ T &#x3D; T 访问 属性访问、元素访问 类型收窄时可用 ","link":"","photos":[],"count_time":{"symbolsCount":153,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/tags/TypeScript.json"}],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"TypeScript class","uid":"651c515b0e13fa2dba352e67fcd43790","slug":"TypeScript class","date":"2023-07-07T17:47:16.104Z","updated":"2023-07-07T17:47:16.248Z","comments":true,"path":"api/articles/TypeScript class.json","keywords":"Digital Garden","cover":null,"text":"#TypeScript 定义 TypeScript 完全支持 ES2015 引入的 class 关键字。和其他 JavaScript 语言特性一样，TypeScript 提供了类型注解和其他语法，允许你表达类与其他类型之间的关系。 ","link":"","photos":[],"count_time":{"symbolsCount":124,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/tags/TypeScript.json"}],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"TypeScript mixin","uid":"52c7abe43b46bab510491f8688329c6b","slug":"TypeScript mixin","date":"2023-07-07T17:47:16.106Z","updated":"2023-07-07T17:47:16.249Z","comments":true,"path":"api/articles/TypeScript mixin.json","keywords":"Digital Garden","cover":null,"text":"#TypeScript Mixin mixin 是一个抽象子类；即一个子类定义，可以应用于不同的超 (父) 类以创建相关的修改类族群。 —Gilad Bracha 和 William Cook，基于 Mixin 的继承 typescript 中没有多重继承的概念 // Dispo...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/tags/TypeScript.json"}],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"TypeScript 内置类型","uid":"a47409eec97e52b23350d2deb27473f3","slug":"TypeScript 内置类型","date":"2023-07-07T17:47:16.108Z","updated":"2023-07-07T17:47:16.250Z","comments":true,"path":"api/articles/TypeScript 内置类型.json","keywords":"Digital Garden","cover":null,"text":"#TypeScript Numberlet num:number = 1; Booleanlet isDone: boolean = false; Object object 表示非原始类型 declare function create(o: object | null): v...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/tags/TypeScript.json"}],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"TypeScript 类型推断","uid":"722f32e5a716e48bf546864e109834ee","slug":"TypeScript 类型推断","date":"2023-07-07T17:47:16.110Z","updated":"2023-07-07T17:47:16.251Z","comments":true,"path":"api/articles/TypeScript 类型推断.json","keywords":"Digital Garden","cover":null,"text":"#TypeScript 声明变量时指定类型let name: string &#x3D; &quot;John&quot;; let age: number &#x3D; 25; let isActive: boolean &#x3D; true; 类型推断自动根据上下文进行类型...","link":"","photos":[],"count_time":{"symbolsCount":669,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/tags/TypeScript.json"}],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"TypeScript装饰器","uid":"6ce48bf08a6702c21eabf4f22bcbbe7d","slug":"TypeScript装饰器","date":"2023-07-07T17:47:16.113Z","updated":"2023-07-07T17:47:16.253Z","comments":true,"path":"api/articles/TypeScript装饰器.json","keywords":"Digital Garden","cover":null,"text":"#TypeScript TypeScript 装饰器是一种特殊类型的声明，它可以附加到类、方法、属性或参数上，以修改或增强它们的行为。装饰器提供了一种在不修改源代码的情况下对现有代码进行扩展的机制。 分类类装饰器\"compilerOptions\": &#123; \"experim...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/tags/TypeScript.json"}],"author":{"name":"Devmacy","slug":"blog-author","avatar":"https://s1.ax1x.com/2023/01/24/pSYhwB4.jpg","link":"/","description":"数字花园","socials":{"github":"https://github.com/Devmacy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}